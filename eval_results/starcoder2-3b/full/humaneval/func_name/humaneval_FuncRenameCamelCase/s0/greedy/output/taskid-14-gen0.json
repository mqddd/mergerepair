{"task_id": "HumanEval/14", "completion": "", "ori_pred": "\ndef allSuffixes(string: str) -> List[str]:\n    \"\"\" Return list of all suffixes from shortest to longest of the input string\n    >>> allSuffixes('abc')\n    ['bc', 'c', '']\n    \"\"\"\n\ndef allSubstrings(string: str) -> List[str]:\n    \"\"\" Return list of all substrings from shortest to longest of the input string\n    >>> allSubstrings('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c', '']\n    \"\"\"\n\ndef allPalindromes(string: str) -> List[str]:\n    \"\"\" Return list of all palindromes from shortest to longest of the input string\n    >>> allPalindromes('abc')\n    ['a', 'ab', 'abc', 'c', '']\n    \"\"\"\n\ndef allAnagrams(string: str) -> List[str]:\n    \"\"\" Return list of all anagrams of the input string\n    >>> allAnagrams('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allPermutations(string: str) -> List[str]:\n    \"\"\" Return list of all permutations of the input string\n    >>> allPermutations('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allCombinations(string: str, k: int) -> List[str]:\n    \"\"\" Return list of all combinations of length k of the input string\n    >>> allCombinations('abc', 2)\n    ['ab', 'ac', 'bc']\n    \"\"\"\n\ndef allPermutationsOf(string: str, k: int) -> List[str]:\n    \"\"\" Return list of all permutations of length k of the input string\n    >>> allPermutationsOf('abc', 2)\n    ['ab', 'ac', 'bc']\n    \"\"\"\n\ndef allCombinationsOf(string: str, k: int) -> List[str]:\n    \"\"\" Return list of all combinations of length k of the input string\n    >>> allCombinationsOf('abc', 2)\n    ['ab', 'ac', 'bc']\n    \"\"\"\n\ndef allPermutationsOfAll(string: str) -> List[str]:\n    \"\"\" Return list of all permutations of all of the input string\n    >>> allPermutationsOfAll('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allCombinationsOfAll(string: str) -> List[str]:\n    \"\"\" Return list of all combinations of all of the input string\n    >>> allCombinationsOfAll('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n\ndef allPermutationsOfAllOf(string: str) -> List[str]:\n    \"\"\" Return list of all permutations of all of the input string\n    >>> allPermutationsOfAllOf('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allCombinationsOfAllOf(string: str) -> List[str]:\n    \"\"\" Return list of all combinations of all of the input string\n    >>> allCombinationsOfAllOf('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n\ndef allPermutationsOfAllOfAll(string: str) -> List[str]:\n    \"\"\" Return list of all permutations of all of all of the input string\n    >>> allPermutationsOfAllOfAll('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allCombinationsOfAllOfAll(string: str) -> List[str]:\n    \"\"\" Return list of all combinations of all of all of the input string\n    >>> allCombinationsOfAllOfAll('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n\ndef allPermutationsOfAllOfAllOf(string: str) -> List[str]:\n    \"\"\" Return list of all permutations of all of all of the input string\n    >>> allPermutationsOfAllOfAllOf('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allCombinationsOfAllOfAllOf(string: str) -> List[str]:\n    \"\"\" Return list of all combinations of all of all of the input string\n    >>> allCombinationsOfAllOfAllOf('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n\ndef allPermutationsOfAllOfAllOfAll(string: str) -> List[str]:\n    \"\"\" Return list of all permutations of all of all of all of the input string\n    >>> allPermutationsOfAllOfAllOfAll('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allCombinationsOfAllOfAllOfAll(string: str) -> List[str]:\n    \"\"\" Return list of all combinations of all of all of all of the input string\n    >>> allCombinationsOfAllOfAllOfAll('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n\ndef allPermutationsOfAllOfAllOfAllOf(string: str) -> List[str]:\n    \"\"\" Return list of all permutations of all of all of all of the input string\n    >>> allPermutationsOfAllOfAllOfAllOf('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allCombinationsOfAllOfAllOfAllOf(string: str) -> List[str]:\n    \"\"\" Return list of all combinations of all of all of all of the input string\n    >>> allCombinationsOfAllOfAllOfAllOf('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n\ndef allPermutationsOfAllOfAllOfAllOfAll(string: str) -> List[str]:\n    \"\"\" Return list of all permutations of all of all of all of all of the input string\n    >>> allPermutationsOfAllOfAllOfAllOfAll('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allCombinationsOfAllOfAllOfAllOfAll(string: str) -> List[str]:\n    \"\"\" Return list of all combinations of all of all of all of all of the input string\n    >>> allCombinationsOfAllOfAllOfAllOfAll('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n\ndef allPermutationsOfAllOfAllOfAllOfAllOf(string: str) -> List[str]:\n    \"\"\" Return list of all permutations of all of all of all of all of the input string\n    >>> allPermutationsOfAllOfAllOfAllOfAllOf('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allCombinationsOfAllOfAllOfAllOfAllOf(string: str) -> List[str]:\n    \"\"\" Return list of all combinations of all of all of all of all of the input string\n    >>> allCombinationsOfAllOfAllOfAllOfAllOf('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n\ndef allPermutationsOfAllOfAllOfAllOfAllOfAll(string: str) -> List[str]:\n    \"\"\" Return list of all permutations of all of all of all of all of all of the input string\n    >>> allPermutationsOfAllOfAllOfAllOfAllOfAll('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allCombinationsOfAllOfAllOfAllOfAllOfAll(string: str) -> List[str]:\n    \"\"\" Return list of all combinations of all of all of all of all of all of the input string\n    >>> allCombinationsOfAllOfAllOfAllOfAllOfAll('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n\ndef allPermutationsOfAllOfAllOfAllOfAllOfAllOf(string: str) -> List[str]:\n    \"\"\" Return list of all permutations of all of all of all of all of all of the input string\n    >>> allPermutationsOfAllOfAllOfAllOfAllOfAllOf('abc')\n    ['abc', 'acb', 'bac', 'bca', 'cab', 'cba']\n    \"\"\"\n\ndef allCombinationsOfAllOfAllOfAllOfAllOfAllOf(string: str) -> List[str]:\n    \"\"\" Return list of all combinations of all of all of all of all of all of the input string\n    >>> allCombinationsOfAllOfAllOfAllOfAllOfAllOf('abc')\n    ['a', 'ab', 'abc', 'b', 'bc', 'c']\n    \"\"\"\n\n", "input": "from typing import List\n\n\ndef allPrefixes(string: str) -> List[str]:\n    \"\"\" Return list of all prefixes from shortest to longest of the input string\n    >>> allPrefixes('abc')\n    ['a', 'ab', 'abc']\n    \"\"\"\n", "mean_logp": null}
{"task_id": "HumanEval/4", "completion": "", "ori_pred": "\ndef medianAbsoluteDeviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Median Absolute Deviation\n    around the median of this dataset.\n    Median Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (median in this case):\n    MAD = average | x - x_median |\n    >>> medianAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n\ndef meanSquaredError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Mean Squared\n    Error.\n    Mean Squared Error is the average squared difference between each element\n    and a centerpoint (mean in this case):\n    MSE = average (x - x_mean)^2\n    >>> meanSquaredError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\ndef rootMeanSquaredError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Root Mean\n    Squared Error.\n    Root Mean Squared Error is the square root of the average squared difference\n    between each element and a centerpoint (mean in this case):\n    RMSE = sqrt(average (x - x_mean)^2)\n    >>> rootMeanSquaredError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\ndef meanAbsolutePercentageError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Mean\n    Absolute Percentage Error.\n    Mean Absolute Percentage Error is the average absolute percentage difference\n    between each element and a centerpoint (mean in this case):\n    MAPE = average | (x - x_mean) / x |\n    >>> meanAbsolutePercentageError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\ndef rootMeanSquaredLogarithmicError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Root Mean\n    Squared Logarithmic Error.\n    Root Mean Squared Logarithmic Error is the square root of the average squared\n    logarithmic difference between each element and a centerpoint (mean in this\n    case):\n    RMSE = sqrt(average log^2(x / x_mean))\n    >>> rootMeanSquaredLogarithmicError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\ndef meanSquaredLogarithmicError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Mean Squared\n    Logarithmic Error.\n    Mean Squared Logarithmic Error is the average squared logarithmic difference\n    between each element and a centerpoint (mean in this case):\n    MSE = average log^2(x / x_mean)\n    >>> meanSquaredLogarithmicError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\ndef meanAbsoluteScaledError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Mean Absolute\n    Scaled Error.\n    Mean Absolute Scaled Error is the average absolute scaled difference between\n    each element and a centerpoint (mean in this case):\n    MASE = average | (x - x_mean) / x_mean |\n    >>> meanAbsoluteScaledError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\ndef rootMeanSquaredScaledError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Root Mean\n    Squared Scaled Error.\n    Root Mean Squared Scaled Error is the square root of the average squared\n    scaled difference between each element and a centerpoint (mean in this case):\n    RMSE = sqrt(average (x - x_mean)^2 / x_mean)\n    >>> rootMeanSquaredScaledError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\ndef meanPercentageError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Mean\n    Percentage Error.\n    Mean Percentage Error is the average percentage difference between each\n    element and a centerpoint (mean in this case):\n    MPE = average (x - x_mean) / x_mean\n    >>> meanPercentageError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\ndef meanPercentageAbsoluteError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Mean\n    Percentage Absolute Error.\n    Mean Percentage Absolute Error is the average percentage absolute difference\n    between each element and a centerpoint (mean in this case):\n    MAPE = average | (x - x_mean) / x_mean |\n    >>> meanPercentageAbsoluteError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\ndef meanSymmetricPercentageError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Mean\n    Symmetric Percentage Error.\n    Mean Symmetric Percentage Error is the average symmetric percentage difference\n    between each element and a centerpoint (mean in this case):\n    MSPE = average | (x - x_mean) / (x + x_mean) |\n    >>> meanSymmetricPercentageError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\ndef meanSymmetricMeanAbsolutePercentageError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Mean\n    Symmetric Mean Absolute Percentage Error.\n    Mean Symmetric Mean Absolute Percentage Error is the average symmetric\n    mean absolute percentage difference between each element and a centerpoint\n    (mean in this case):\n    MSPE = average | (x - x_mean) / (x + x_mean) |\n    >>> meanSymmetricMeanAbsolutePercentageError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\ndef meanSymmetricMeanPercentageError(actual: List[float], predicted: List[float]) -> float:\n    \"\"\" For a given list of actual and predicted values, calculate Mean\n    Symmetric Mean Percentage Error.\n    Mean Symmetric Mean Percentage Error is the average symmetric mean percentage\n    difference between each element and a centerpoint (mean in this case):\n    MSPE = average | (x - x_mean) / (x + x_mean) |\n    >>> meanSymmetricMeanPercentageError([1.0, 2.0, 3.0, 4.0], [1.0, 2.0, 3.0, 4.0])\n    0.0\n    \"\"\"\n\n", "input": "from typing import List\n\n\ndef meanAbsoluteDeviation(numbers: List[float]) -> float:\n    \"\"\" For a given list of input numbers, calculate Mean Absolute Deviation\n    around the mean of this dataset.\n    Mean Absolute Deviation is the average absolute difference between each\n    element and a centerpoint (mean in this case):\n    MAD = average | x - x_mean |\n    >>> meanAbsoluteDeviation([1.0, 2.0, 3.0, 4.0])\n    1.0\n    \"\"\"\n", "mean_logp": null}
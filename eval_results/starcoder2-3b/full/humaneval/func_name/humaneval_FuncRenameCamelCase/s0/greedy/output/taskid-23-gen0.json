{"task_id": "HumanEval/23", "completion": "", "ori_pred": "\ndef str_to_int(string: str) -> int:\n    \"\"\" Convert string to integer\n    >>> str_to_int('123')\n    123\n    >>> str_to_int('1234567890')\n    1234567890\n    >>> str_to_int('123456789012345678901234567890')\n    123456789012345678901234567890\n    \"\"\"\n\ndef int_to_str(number: int) -> str:\n    \"\"\" Convert integer to string\n    >>> int_to_str(123)\n    '123'\n    >>> int_to_str(1234567890)\n    '1234567890'\n    >>> int_to_str(123456789012345678901234567890)\n    '123456789012345678901234567890'\n    \"\"\"\n\ndef str_to_float(string: str) -> float:\n    \"\"\" Convert string to float\n    >>> str_to_float('123')\n    123.0\n    >>> str_to_float('123.456')\n    123.456\n    >>> str_to_float('123.456789012345678901234567890')\n    123.456789012345678901234567890\n    \"\"\"\n\ndef float_to_str(number: float) -> str:\n    \"\"\" Convert float to string\n    >>> float_to_str(123.0)\n    '123.0'\n    >>> float_to_str(123.456)\n    '123.456'\n    >>> float_to_str(123.456789012345678901234567890)\n    '123.456789012345678901234567890'\n    \"\"\"\n\ndef str_to_bool(string: str) -> bool:\n    \"\"\" Convert string to boolean\n    >>> str_to_bool('True')\n    True\n    >>> str_to_bool('False')\n    False\n    \"\"\"\n\ndef bool_to_str(boolean: bool) -> str:\n    \"\"\" Convert boolean to string\n    >>> bool_to_str(True)\n    'True'\n    >>> bool_to_str(False)\n    'False'\n    \"\"\"\n\ndef str_to_list(string: str) -> list:\n    \"\"\" Convert string to list\n    >>> str_to_list('1,2,3,4,5')\n    ['1', '2', '3', '4', '5']\n    >>> str_to_list('1,2,3,4,5,6,7,8,9,10')\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10']\n    \"\"\"\n\ndef list_to_str(list: list) -> str:\n    \"\"\" Convert list to string\n    >>> list_to_str(['1', '2', '3', '4', '5'])\n    '1,2,3,4,5'\n    >>> list_to_str(['1', '2', '3', '4', '5', '6', '7', '8', '9', '10'])\n    '1,2,3,4,5,6,7,8,9,10'\n    \"\"\"\n\ndef str_to_dict(string: str) -> dict:\n    \"\"\" Convert string to dictionary\n    >>> str_to_dict('1:2,3:4,5:6')\n    {'1': '2', '3': '4', '5': '6'}\n    >>> str_to_dict('1:2,3:4,5:6,7:8,9:10')\n    {'1': '2', '3': '4', '5': '6', '7': '8', '9': '10'}\n    \"\"\"\n\ndef dict_to_str(dictionary: dict) -> str:\n    \"\"\" Convert dictionary to string\n    >>> dict_to_str({'1': '2', '3': '4', '5': '6'})\n    '1:2,3:4,5:6'\n    >>> dict_to_str({'1': '2', '3': '4', '5': '6', '7': '8', '9': '10'})\n    '1:2,3:4,5:6,7:8,9:10'\n    \"\"\"\n\ndef str_to_set(string: str) -> set:\n    \"\"\" Convert string to set\n    >>> str_to_set('1,2,3,4,5')\n    {'1', '2', '3', '4', '5'}\n    >>> str_to_set('1,2,3,4,5,6,7,8,9,10')\n    {'1', '2', '3', '4', '5', '6', '7', '8', '9', '10'}\n    \"\"\"\n\ndef set_to_str(set: set) -> str:\n    \"\"\" Convert set to string\n    >>> set_to_str({'1', '2', '3', '4', '5'})\n    '1,2,3,4,5'\n    >>> set_to_str({'1', '2', '3', '4', '5', '6', '7', '8', '9', '10'})\n    '1,2,3,4,5,6,7,8,9,10'\n    \"\"\"\n\ndef str_to_tuple(string: str) -> tuple:\n    \"\"\" Convert string to tuple\n    >>> str_to_tuple('1,2,3,4,5')\n    ('1', '2', '3', '4', '5')\n    >>> str_to_tuple('1,2,3,4,5,6,7,8,9,10')\n    ('1', '2', '3', '4', '5', '6', '7', '8', '9', '10')\n    \"\"\"\n\ndef tuple_to_str(tuple: tuple) -> str:\n    \"\"\" Convert tuple to string\n    >>> tuple_to_str(('1', '2', '3', '4', '5'))\n    '1,2,3,4,5'\n    >>> tuple_to_str(('1', '2', '3', '4', '5', '6', '7', '8', '9', '10'))\n    '1,2,3,4,5,6,7,8,9,10'\n    \"\"\"\n\ndef str_to_bytes(string: str) -> bytes:\n    \"\"\" Convert string to bytes\n    >>> str_to_bytes('1234567890')\n    b'1234567890'\n    >>> str_to_bytes('123456789012345678901234567890')\n    b'123456789012345678901234567890'\n    \"\"\"\n\ndef bytes_to_str(bytes: bytes) -> str:\n    \"\"\" Convert bytes to string\n    >>> bytes_to_str(b'1234567890')\n    '1234567890'\n    >>> bytes_to_str(b'123456789012345678901234567890')\n    '123456789012345678901234567890'\n    \"\"\"\n\n", "input": "\n\ndef strlen(string: str) -> int:\n    \"\"\" Return length of given string\n    >>> strlen('')\n    0\n    >>> strlen('abc')\n    3\n    \"\"\"\n", "mean_logp": null}